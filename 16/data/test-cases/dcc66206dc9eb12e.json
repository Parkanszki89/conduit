{"uid":"dcc66206dc9eb12e","name":"test_delete_article","fullName":"test_conduit.TestConduit#test_delete_article","historyId":"b8af85e42a62f9e211bd1a1d15a11d94","time":{"start":1681225501915,"stop":1681225503017,"duration":1102},"status":"broken","statusMessage":"selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: headless chrome=111.0.5563.146)\nStacktrace:\n#0 0x5637373d4243 <unknown>\n#1 0x5637371987a6 <unknown>\n#2 0x56373719bd03 <unknown>\n#3 0x56373719ba72 <unknown>\n#4 0x56373719bd8c <unknown>\n#5 0x5637371d7910 <unknown>\n#6 0x5637371d66dd <unknown>\n#7 0x5637371caa65 <unknown>\n#8 0x5637371f6082 <unknown>\n#9 0x5637371ca2e3 <unknown>\n#10 0x5637371f624e <unknown>\n#11 0x56373720e932 <unknown>\n#12 0x5637371f5e53 <unknown>\n#13 0x5637371c89ea <unknown>\n#14 0x5637371c9b2e <unknown>\n#15 0x563737428d5e <unknown>\n#16 0x56373742ca80 <unknown>\n#17 0x56373740e8b0 <unknown>\n#18 0x56373742db63 <unknown>\n#19 0x5637373fff75 <unknown>\n#20 0x563737450998 <unknown>\n#21 0x563737450b27 <unknown>\n#22 0x56373746bc23 <unknown>\n#23 0x7ff0af659b43 <unknown>","statusTrace":"self = <test_conduit.TestConduit object at 0x7f3dbc3f0b20>\n\n    def test_delete_article(self):\n        self.login()\n        username_nav = self.browser.find_element(By.XPATH, '//li/a[contains(text(), \"' + user_name + '\")]')\n        username_nav.click()\n        WebDriverWait(self.browser, 3).until(EC.url_to_be('http://localhost:1667/#/@' + user_name + '/'))\n        WebDriverWait(self.browser, 3).until(EC.presence_of_element_located((By.CSS_SELECTOR, '.preview-link')))\n        article_link = self.browser.find_element(By.CSS_SELECTOR, '.preview-link')\n>       article_link.click()\n\ntest_conduit.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:404: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f3dba542e00>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...\\\\n#21 0x563737450b27 \\\\u003Cunknown>\\\\n#22 0x56373746bc23 \\\\u003Cunknown>\\\\n#23 0x7ff0af659b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: headless chrome=111.0.5563.146)\nE       Stacktrace:\nE       #0 0x5637373d4243 <unknown>\nE       #1 0x5637371987a6 <unknown>\nE       #2 0x56373719bd03 <unknown>\nE       #3 0x56373719ba72 <unknown>\nE       #4 0x56373719bd8c <unknown>\nE       #5 0x5637371d7910 <unknown>\nE       #6 0x5637371d66dd <unknown>\nE       #7 0x5637371caa65 <unknown>\nE       #8 0x5637371f6082 <unknown>\nE       #9 0x5637371ca2e3 <unknown>\nE       #10 0x5637371f624e <unknown>\nE       #11 0x56373720e932 <unknown>\nE       #12 0x5637371f5e53 <unknown>\nE       #13 0x5637371c89ea <unknown>\nE       #14 0x5637371c9b2e <unknown>\nE       #15 0x563737428d5e <unknown>\nE       #16 0x56373742ca80 <unknown>\nE       #17 0x56373740e8b0 <unknown>\nE       #18 0x56373742db63 <unknown>\nE       #19 0x5637373fff75 <unknown>\nE       #20 0x563737450998 <unknown>\nE       #21 0x563737450b27 <unknown>\nE       #22 0x56373746bc23 <unknown>\nE       #23 0x7ff0af659b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:245: StaleElementReferenceException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestConduit","time":{"start":1681225500864,"stop":1681225501915,"duration":1051},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"afterStages":[{"name":"_xunit_setup_method_fixture_TestConduit::0","time":{"start":1681225503051,"stop":1681225503106,"duration":55},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"suite","value":"test_conduit"},{"name":"subSuite","value":"TestConduit"},{"name":"host","value":"fv-az402-234"},{"name":"thread","value":"3083-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_conduit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"dcc66206dc9eb12e.json","parameterValues":[]}