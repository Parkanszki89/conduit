{"uid":"fd8c4f13d04485cb","name":"test_register","fullName":"test_conduit.TestConduit#test_register","historyId":"8ba97f65f84edc4c5922790620e093e6","time":{"start":1681570443573,"stop":1681570447034,"duration":3461},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <test_conduit.TestConduit object at 0x7f11e7d64e20>\n\n    def test_register(self):\n        register_link = self.browser.find_element(By.XPATH, '//a[@href=\"#/register\"]')\n        register_link.click()\n    \n        username_input = self.browser.find_element(By.XPATH, '//input[@placeholder=\"Username\"]')\n        email_input = self.browser.find_element(By.XPATH, '//input[@placeholder=\"Email\"]')\n        password_input = self.browser.find_element(By.XPATH, '//input[@type=\"password\"]')\n        sign_up_btn = self.browser.find_element(By.XPATH, '//button[contains(text(), \"Sign up\")]')\n    \n        username_input.send_keys(user_name)\n        email_input.send_keys(user_email)\n        password_input.send_keys(user_password)\n    \n        sign_up_btn.click()\n    \n>       WebDriverWait(self.browser, 3).until(EC.url_to_be('http://localhost:1667/#/'))\n\ntest_conduit.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"306274d772f1dc89fce5bab28334932c\")>\nmethod = <function url_to_be.<locals>._predicate at 0x7f11e7e170a0>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestConduit","time":{"start":1681570442675,"stop":1681570443572,"duration":897},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"afterStages":[{"name":"_xunit_setup_method_fixture_TestConduit::0","time":{"start":1681570447081,"stop":1681570447138,"duration":57},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"suite","value":"test_conduit"},{"name":"subSuite","value":"TestConduit"},{"name":"host","value":"fv-az1135-506"},{"name":"thread","value":"3114-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_conduit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"fd8c4f13d04485cb.json","parameterValues":[]}